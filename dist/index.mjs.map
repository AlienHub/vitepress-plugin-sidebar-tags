{"version":3,"file":"index.mjs","sources":["../src/core.ts","../src/presets.ts","../src/index.ts"],"sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport matter from 'gray-matter'\nimport type { \n  SidebarTagsOptions, \n  SidebarItem, \n  FrontmatterData, \n  TagConfig,\n  TagPosition,\n  CustomTagStyle,\n  SidebarSource\n} from './types'\n\nexport class SidebarTagsCore {\n  private options: SidebarTagsOptions\n  private tagConfigs: TagConfig[]\n  \n  constructor(options: SidebarTagsOptions) {\n    this.options = options\n    this.tagConfigs = options.tags || []\n    \n    // 设置默认值\n    this.options.docsPath = this.options.docsPath || 'docs'\n    this.options.sidebarPath = this.options.sidebarPath || 'sidebar'\n    this.options.injectInProduction = this.options.injectInProduction ?? false\n    this.options.debug = this.options.debug ?? false\n    this.options.locales = this.options.locales || ['zh', 'en']\n  }\n  \n  /**\n   * 获取文件的 frontmatter 数据\n   */\n  private getFrontmatter(filePath: string): FrontmatterData {\n    try {\n      if (fs.existsSync(filePath)) {\n        const content = fs.readFileSync(filePath, 'utf-8')\n        const { data } = matter(content)\n        return data\n      }\n    } catch (error) {\n      if (this.options.debug) {\n        console.warn(`Warning: Could not read frontmatter from ${filePath}`, error)\n      }\n    }\n    return {}\n  }\n  \n  /**\n   * 生成单个标签HTML\n   */\n  private generateTag(config: TagConfig, value: string): string {\n    // 检查是否应该显示此标签\n    if (typeof config.show === 'function' && !config.show(value)) return ''\n    \n    // 应用值转换\n    let displayValue = value\n    if (config.transform) {\n      displayValue = config.transform(value)\n    }\n    \n    // 添加前缀和后缀\n    if (config.prefix) displayValue = config.prefix + displayValue\n    if (config.suffix) displayValue = displayValue + config.suffix\n    \n    // 获取实际配置（可能被valueStyles覆盖）\n    const actualConfig = this.getActualConfig(config, value)\n    \n    // 生成CSS类名\n    const classes = this.generateTagClasses(actualConfig)\n    \n    // 生成内联样式（如果有自定义样式）\n    const inlineStyles = this.generateInlineStyles(actualConfig.customStyle)\n    \n    const position = actualConfig.position || 'after'\n    const positionClass = position === 'before' ? 'before' : 'after'\n    \n    return ` <span class=\"sidebar-tag ${classes} ${positionClass}\"${inlineStyles}>${displayValue}</span>`\n  }\n  \n  /**\n   * 获取实际配置（应用valueStyles覆盖）\n   */\n  private getActualConfig(config: TagConfig, value: string): TagConfig {\n    const valueStyle = config.valueStyles?.[value] || config.valueStyles?.[value.toLowerCase()] || config.valueStyles?.[value.toUpperCase()]\n    \n    if (valueStyle) {\n      return { ...config, ...valueStyle }\n    }\n    \n    return config\n  }\n  \n  /**\n   * 生成标签CSS类名\n   */\n  private generateTagClasses(config: TagConfig): string {\n    const classes: string[] = []\n    \n    // 添加大小类\n    if (config.size) {\n      classes.push(config.size)\n    }\n    \n    // 添加变体类\n    if (config.variant) {\n      classes.push(config.variant)\n    }\n    \n    // 添加圆角类\n    if (config.rounded) {\n      classes.push(`rounded-${config.rounded}`)\n    }\n    \n    // 添加颜色类或自定义类\n    if (config.customStyle) {\n      classes.push('custom')\n    } else if (config.color) {\n      classes.push(config.color)\n    }\n    \n    return classes.join(' ')\n  }\n  \n  /**\n   * 生成内联样式\n   */\n  private generateInlineStyles(customStyle?: CustomTagStyle): string {\n    if (!customStyle) return ''\n    \n    const styles: string[] = []\n    \n    if (customStyle.backgroundColor) {\n      styles.push(`--sidebar-tag-bg: ${customStyle.backgroundColor}`)\n    }\n    if (customStyle.color) {\n      styles.push(`--sidebar-tag-color: ${customStyle.color}`)\n    }\n    if (customStyle.borderColor) {\n      styles.push(`--sidebar-tag-border: ${customStyle.borderColor}`)\n    }\n    if (customStyle.darkBackgroundColor) {\n      styles.push(`--sidebar-tag-dark-bg: ${customStyle.darkBackgroundColor}`)\n    }\n    if (customStyle.darkColor) {\n      styles.push(`--sidebar-tag-dark-color: ${customStyle.darkColor}`)\n    }\n    if (customStyle.darkBorderColor) {\n      styles.push(`--sidebar-tag-dark-border: ${customStyle.darkBorderColor}`)\n    }\n    \n    return styles.length > 0 ? ` style=\"${styles.join('; ')}\"` : ''\n  }\n  \n  /**\n   * 生成标签 HTML\n   */\n  private generateTags(frontmatter: FrontmatterData): { beforeTags: string; afterTags: string } {\n    if (!frontmatter || this.tagConfigs.length === 0) {\n      return { beforeTags: '', afterTags: '' }\n    }\n    \n    // 为每个标签配置生成标签，并收集结果\n    const tags: Array<{ html: string; priority: number; position: TagPosition }> = []\n    \n    for (const config of this.tagConfigs) {\n      const value = frontmatter[config.field]\n      \n      if (value !== undefined && value !== null && value !== '') {\n        // 检查条件显示\n        if (config.show && typeof config.show === 'function' && !config.show(String(value))) {\n          continue\n        }\n        \n        // 转换值\n        const displayValue = config.transform ? config.transform(String(value)) : String(value)\n        \n        // 生成标签HTML\n        const tagHtml = this.generateTag(config, displayValue)\n        \n        tags.push({\n          html: tagHtml,\n          priority: config.priority || 0,\n          position: config.position || 'after'\n        })\n      }\n    }\n    \n    // 按优先级排序（数值越小优先级越高）\n    tags.sort((a, b) => a.priority - b.priority)\n    \n    // 分离前置和后置标签\n    const beforeTags = tags.filter(tag => tag.position === 'before').map(tag => tag.html).join('')\n    const afterTags = tags.filter(tag => tag.position === 'after').map(tag => tag.html).join('')\n    \n    return { beforeTags, afterTags }\n  }\n  \n  /**\n   * 注入标签到侧边栏项目\n   */\n  private injectTags(items: SidebarItem[], basePath = '', locale = 'zh'): SidebarItem[] {\n    return items.map(item => {\n      const newItem = { ...item }\n      \n      // 处理有 link 的项目\n      if (newItem.link && !newItem.link.startsWith('http')) {\n        // 构建完整的文件路径\n        let fullPath = newItem.link\n        if (newItem.base) {\n          fullPath = newItem.base + newItem.link\n        } else if (basePath) {\n          fullPath = basePath + newItem.link\n        }\n        \n        // 智能路径处理：根据配置和文件存在性决定使用哪种路径\n        const docsPath = path.join(process.cwd(), this.options.docsPath || 'docs')\n        let markdownPath: string\n        let finalPath: string\n        \n        // 如果用户明确指定了多语言模式\n        if (this.options.multiLanguage === true) {\n          // 强制使用多语言路径\n          let localeFullPath = fullPath\n          if (!localeFullPath.startsWith(`/${locale}/`)) {\n            localeFullPath = `/${locale}${localeFullPath.startsWith('/') ? '' : '/'}${localeFullPath}`\n          }\n          const localeMarkdownPath = path.join(docsPath, `${localeFullPath.substring(1)}.md`)\n          markdownPath = localeMarkdownPath\n          finalPath = localeFullPath\n        } else if (this.options.multiLanguage === false) {\n          // 强制使用单语言路径\n          const originalPath = fullPath.startsWith('/') ? fullPath.substring(1) : fullPath\n          const originalMarkdownPath = path.join(docsPath, `${originalPath}.md`)\n          markdownPath = originalMarkdownPath\n          finalPath = fullPath\n        } else {\n          // 自动检测模式\n          const originalPath = fullPath.startsWith('/') ? fullPath.substring(1) : fullPath\n          const originalMarkdownPath = path.join(docsPath, `${originalPath}.md`)\n          \n          if (fs.existsSync(originalMarkdownPath)) {\n            // 单语言文档：直接使用原始路径\n            markdownPath = originalMarkdownPath\n            finalPath = fullPath\n          } else if (locale === 'auto') {\n            // 特殊情况：没有配置语言的自动检测模式，只尝试原始路径\n            markdownPath = originalMarkdownPath\n            finalPath = fullPath\n            if (this.options.debug) {\n              console.warn(`File not found: ${originalMarkdownPath}. Auto-detection mode without locale configured will not try language-specific paths.`)\n            }\n          } else {\n            // 多语言文档：添加语言前缀\n            let localeFullPath = fullPath\n            if (!localeFullPath.startsWith(`/${locale}/`)) {\n              localeFullPath = `/${locale}${localeFullPath.startsWith('/') ? '' : '/'}${localeFullPath}`\n            }\n            const localeMarkdownPath = path.join(docsPath, `${localeFullPath.substring(1)}.md`)\n            markdownPath = localeMarkdownPath\n            finalPath = localeFullPath\n          }\n        }\n        \n        // 获取 frontmatter\n        const frontmatter = this.getFrontmatter(markdownPath)\n        \n        // 生成标签\n        const { beforeTags, afterTags } = this.generateTags(frontmatter)\n        \n        // 注入标签到文本中\n        if (newItem.text) {\n          newItem.text = beforeTags + newItem.text + afterTags\n          \n          if (this.options.debug && (beforeTags || afterTags)) {\n            console.log(`Injected tags for ${finalPath}: before=\"${beforeTags}\", after=\"${afterTags}\"`)\n          }\n        }\n      }\n      \n      // 递归处理子项目\n      if (newItem.items) {\n        const currentBase = newItem.base || basePath\n        newItem.items = this.injectTags(newItem.items, currentBase, locale)\n      }\n      \n      return newItem\n    })\n  }\n  \n  /**\n   * 根据不同的输入源获取侧边栏数据\n   */\n  private async getSidebarData(source: SidebarSource, locale: string): Promise<SidebarItem[]> {\n    if (Array.isArray(source)) {\n      // 直接传入的侧边栏数据\n      return source\n    } \n    \n    if (typeof source === 'string') {\n      // 文件路径\n      return this.loadSidebarFromFile(source, locale)\n    }\n    \n    if (typeof source === 'function') {\n      // 函数返回\n      const result = source()\n      return Promise.resolve(result)\n    }\n    \n    return []\n  }\n\n  /**\n   * 从文件加载侧边栏配置\n   */\n  private loadSidebarFromFile(basePath: string, locale: string): SidebarItem[] {\n    try {\n      const docsPath = this.options.docsPath || 'docs'\n      const sidebarPath = path.join(process.cwd(), docsPath, basePath, `${locale}.json`)\n      \n      if (!fs.existsSync(sidebarPath)) {\n        if (this.options.debug) {\n          console.warn(`Warning: Sidebar file not found: ${sidebarPath}`)\n        }\n        return []\n      }\n      \n      return JSON.parse(fs.readFileSync(sidebarPath, 'utf-8'))\n    } catch (error) {\n      if (this.options.debug) {\n        console.error(`Error reading sidebar file:`, error)\n      }\n      return []\n    }\n  }\n\n  /**\n   * 从VitePress配置中获取侧边栏\n   */\n  private getSidebarFromConfig(locale: string): SidebarItem[] {\n    if (!this.options.vitepressConfig?.themeConfig?.sidebar) {\n      return []\n    }\n    \n    const sidebarConfig = this.options.vitepressConfig.themeConfig.sidebar\n    \n    // 处理多语言配置\n    if (typeof sidebarConfig === 'object' && !Array.isArray(sidebarConfig)) {\n      // 尝试匹配语言路径\n      const localeKeys = Object.keys(sidebarConfig)\n      const matchingKey = localeKeys.find(key => \n        key.includes(`/${locale}/`) || \n        key.includes(`${locale}/`) ||\n        key === locale\n      )\n      \n      if (matchingKey && sidebarConfig[matchingKey]) {\n        return sidebarConfig[matchingKey]\n      }\n      \n      // 如果没找到匹配的语言，返回第一个\n      const firstKey = localeKeys[0]\n      if (firstKey && sidebarConfig[firstKey]) {\n        return sidebarConfig[firstKey]\n      }\n    }\n    \n    // 如果是数组形式，直接返回\n    if (Array.isArray(sidebarConfig)) {\n      return sidebarConfig\n    }\n    \n    return []\n  }\n\n  /**\n   * 生成侧边栏（新的统一接口）\n   */\n  async generateSidebar(locale = 'zh'): Promise<SidebarItem[]> {\n    try {\n      let originalSidebar: SidebarItem[] = []\n      \n      // 按优先级获取侧边栏数据\n      if (this.options.sidebar) {\n        // 1. 优先使用用户指定的sidebar源\n        originalSidebar = await this.getSidebarData(this.options.sidebar, locale)\n      } else if (this.options.vitepressConfig) {\n        // 2. 尝试从VitePress配置获取\n        originalSidebar = this.getSidebarFromConfig(locale)\n      } else if (this.options.sidebarPath) {\n        // 3. 回退到文件方式（向后兼容）\n        originalSidebar = this.loadSidebarFromFile(this.options.sidebarPath, locale)\n      }\n      \n      if (originalSidebar.length === 0) {\n        if (this.options.debug) {\n          console.warn(`No sidebar data found for locale: ${locale}`)\n        }\n        return []\n      }\n      \n      // 如果没有标签配置，直接返回原始数据\n      if (!this.tagConfigs || this.tagConfigs.length === 0) {\n        if (this.options.debug) {\n          console.log(`No tag configs found for ${locale}, returning original sidebar`)\n        }\n        return originalSidebar\n      }\n      \n      // 根据配置决定是否注入标签\n      const shouldInject = this.options.injectInProduction || process.env.NODE_ENV !== 'production'\n      \n      if (shouldInject) {\n        const result = this.injectTags(originalSidebar, '', locale)\n        if (this.options.debug) {\n          console.log(`Generated sidebar for ${locale} with ${result.length} items and ${this.tagConfigs.length} tag configs`)\n        }\n        return result\n      }\n      \n      // 不注入标签，返回原始配置\n      return originalSidebar\n    } catch (error) {\n      console.error(`Error generating sidebar for ${locale}:`, error)\n      return []\n    }\n  }\n\n  /**\n   * 同步生成侧边栏（兼容接口）\n   */\n  generateSidebarSync(locale = 'zh'): SidebarItem[] {\n    // 如果使用了异步数据源，抛出错误\n    if (this.options.sidebar && typeof this.options.sidebar === 'function') {\n      const result = this.options.sidebar()\n      if (result && typeof (result as any).then === 'function') {\n        throw new Error('Cannot use async sidebar source with generateSidebarSync. Please use generateSidebar instead.')\n      }\n      return result as SidebarItem[]\n    }\n    \n    // 对于同步数据源，直接处理\n    try {\n      let originalSidebar: SidebarItem[] = []\n      \n      if (this.options.sidebar) {\n        if (Array.isArray(this.options.sidebar)) {\n          originalSidebar = this.options.sidebar\n        } else if (typeof this.options.sidebar === 'string') {\n          originalSidebar = this.loadSidebarFromFile(this.options.sidebar, locale)\n        }\n      } else if (this.options.vitepressConfig) {\n        originalSidebar = this.getSidebarFromConfig(locale)\n      } else if (this.options.sidebarPath) {\n        originalSidebar = this.loadSidebarFromFile(this.options.sidebarPath, locale)\n      }\n      \n      // 如果没有标签配置，直接返回原始数据\n      if (!this.tagConfigs || this.tagConfigs.length === 0) {\n        if (this.options.debug) {\n          console.log(`No tag configs found for ${locale}, returning original sidebar`)\n        }\n        return originalSidebar\n      }\n      \n      const shouldInject = this.options.injectInProduction || process.env.NODE_ENV !== 'production'\n      \n      if (shouldInject) {\n        return this.injectTags(originalSidebar, '', locale)\n      }\n      \n      return originalSidebar\n    } catch (error) {\n      console.error(`Error generating sidebar for ${locale}:`, error)\n      return []\n    }\n  }\n} ","import type { TagConfig, TagPresets } from './types'\n\n/**\n * 预设标签配置\n */\nexport const tagPresets: TagPresets = {\n  /**\n   * HTTP 方法标签预设\n   */\n  httpMethods: {\n    field: 'method',\n    position: 'after',\n    size: 'xs',\n    variant: 'solid',\n    color: 'primary',\n    rounded: 'sm',\n    transform: (value) => value.toUpperCase(),\n    valueStyles: {\n      'GET': { color: 'success' },\n      'POST': { color: 'info' },\n      'PUT': { color: 'warning' },\n      'DELETE': { color: 'error' },\n      'PATCH': { color: 'purple' },\n      'HEAD': { color: 'gray' },\n      'OPTIONS': { color: 'gray' }\n    }\n  },\n\n  /**\n   * 版本标签预设\n   */\n  version: {\n    field: 'version',\n    position: 'after',\n    size: 'xs',\n    variant: 'outline',\n    color: 'blue',\n    rounded: 'md',\n    prefix: 'v',\n    transform: (value) => value.replace(/^v?/, ''),\n    show: (value) => Boolean(value)\n  },\n\n  /**\n   * 状态标签预设\n   */\n  status: {\n    field: 'status',\n    position: 'after',\n    size: 'xs',\n    variant: 'soft',\n    color: 'gray',\n    rounded: 'lg',\n    valueStyles: {\n      'new': { color: 'green' },\n      'updated': { color: 'blue' },\n      'deprecated': { color: 'orange' },\n      'removed': { color: 'red' },\n      'experimental': { color: 'purple' },\n      'stable': { color: 'success' },\n      'beta': { color: 'warning' },\n      'alpha': { color: 'error' }\n    },\n    transform: (value) => value.toUpperCase()\n  },\n\n  /**\n   * 更新标签预设\n   */\n  update: {\n    field: 'update',\n    position: 'before',\n    size: 'xs',\n    variant: 'solid',\n    color: 'success',\n    rounded: 'full',\n    valueStyles: {\n      'new': { color: 'success' },\n      'updated': { color: 'info' },\n      'hot': { color: 'error' }\n    },\n    transform: (value) => value.toUpperCase(),\n    show: (value) => ['new', 'updated', 'hot'].includes(value.toLowerCase())\n  }\n}\n\n/**\n * 快速配置函数\n */\nexport function createHttpMethodsTag(overrides?: Partial<TagConfig>): TagConfig {\n  return { ...tagPresets.httpMethods, ...overrides }\n}\n\nexport function createVersionTag(overrides?: Partial<TagConfig>): TagConfig {\n  return { ...tagPresets.version, ...overrides }\n}\n\nexport function createStatusTag(overrides?: Partial<TagConfig>): TagConfig {\n  return { ...tagPresets.status, ...overrides }\n}\n\nexport function createUpdateTag(overrides?: Partial<TagConfig>): TagConfig {\n  return { ...tagPresets.update, ...overrides }\n} ","import type { SidebarTagsOptions, TagConfig, SidebarItem } from './types'\nimport type { DefaultTheme } from 'vitepress'\nimport { SidebarTagsCore } from './core'\n\n// 导出类型\nexport type * from './types'\n\n// 导出核心类（高级用法）\nexport { SidebarTagsCore }\n\n// 导出预设标签配置函数\nexport { \n  createHttpMethodsTag, \n  createVersionTag, \n  createStatusTag, \n  createUpdateTag \n} from './presets'\n\n/**\n * 为侧边栏添加标签（推荐用法）\n * \n * @param sidebar 用户的侧边栏配置\n * @param tags 标签配置数组\n * @param options 可选配置\n * @returns 处理后的侧边栏数据\n */\nexport function withSidebarTags(\n  sidebar: DefaultTheme.SidebarItem[],\n  tags: TagConfig[],\n  options?: {\n    /** 文档根目录路径 */\n    docsPath?: string\n    /** 是否在生产环境注入标签 */\n    injectInProduction?: boolean\n    /** 是否开启调试模式 */\n    debug?: boolean\n    /** 语言代码 */\n    locale?: string\n    /** 是否为多语言模式 */\n    multiLanguage?: boolean\n  }\n): DefaultTheme.SidebarItem[] {\n  const core = new SidebarTagsCore({\n    tags,\n    sidebar,\n    docsPath: options?.docsPath || 'docs',\n    injectInProduction: options?.injectInProduction ?? true,\n    debug: options?.debug ?? false,\n    multiLanguage: options?.multiLanguage\n  })\n  \n  // 如果没有配置语言且为自动检测模式，使用特殊标识符\n  const locale = options?.locale || (options?.multiLanguage === undefined ? 'auto' : 'zh')\n  return core.generateSidebarSync(locale) as DefaultTheme.SidebarItem[]\n}\n\n/**\n * 为多路径侧边栏添加标签\n * \n * @param sidebarConfig 多路径侧边栏配置\n * @param tags 标签配置数组\n * @param options 可选配置\n * @returns 处理后的多路径侧边栏配置\n */\nexport function withMultiSidebarTags(\n  sidebarConfig: DefaultTheme.SidebarMulti,\n  tags: TagConfig[],\n  options?: {\n    /** 文档根目录路径 */\n    docsPath?: string\n    /** 是否在生产环境注入标签 */\n    injectInProduction?: boolean\n    /** 是否开启调试模式 */\n    debug?: boolean\n    /** 是否为多语言模式 */\n    multiLanguage?: boolean\n  }\n): DefaultTheme.SidebarMulti {\n  const result: DefaultTheme.SidebarMulti = {}\n  \n  for (const [path, config] of Object.entries(sidebarConfig)) {\n    if (Array.isArray(config)) {\n      // 从路径中提取语言代码\n      const locale = extractLocaleFromPath(path)\n      result[path] = withSidebarTags(config, tags, {\n        ...options,\n        locale,\n        multiLanguage: options?.multiLanguage ?? true // 多路径侧边栏默认为多语言模式\n      })\n    } else {\n      // 保持原有配置（函数类型等）\n      result[path] = config\n    }\n  }\n  \n  return result\n}\n\n/**\n * 从路径中提取语言代码\n */\nfunction extractLocaleFromPath(path: string): string {\n  const match = path.match(/^\\/([a-z]{2})\\//)\n  return match ? match[1] : 'zh'\n}\n\n/**\n * 自动生成带标签的侧边栏（从文件系统读取）\n * \n * @param tags 标签配置数组\n * @param options 可选配置\n * @returns 处理后的侧边栏数据\n */\nexport function generateSidebar(\n  tags: TagConfig[],\n  options?: {\n    /** 文档根目录路径 */\n    docsPath?: string\n    /** 是否在生产环境注入标签 */\n    injectInProduction?: boolean\n    /** 是否开启调试模式 */\n    debug?: boolean\n    /** 语言代码 */\n    locale?: string\n    /** 是否为多语言模式 */\n    multiLanguage?: boolean\n  }\n): DefaultTheme.SidebarItem[] {\n  const core = new SidebarTagsCore({\n    tags,\n    docsPath: options?.docsPath || 'docs',\n    injectInProduction: options?.injectInProduction ?? true,\n    debug: options?.debug ?? false,\n    multiLanguage: options?.multiLanguage\n  })\n  \n  // 如果没有配置语言且为自动检测模式，使用特殊标识符\n  const locale = options?.locale || (options?.multiLanguage === undefined ? 'auto' : 'zh')\n  return core.generateSidebarSync(locale) as DefaultTheme.SidebarItem[]\n}\n\n/**\n * 从VitePress配置生成侧边栏（兼容用法）\n * \n * @param vitepressConfig VitePress配置对象\n * @param tags 标签配置数组\n * @param locale 语言代码\n * @returns 处理后的侧边栏数据\n */\nexport function generateSidebarFromConfig(\n  vitepressConfig: any,\n  tags: TagConfig[],\n  locale = 'zh'\n): DefaultTheme.SidebarItem[] {\n  const core = new SidebarTagsCore({\n    tags,\n    vitepressConfig\n  })\n  return core.generateSidebarSync(locale) as DefaultTheme.SidebarItem[]\n}\n\n/**\n * 创建侧边栏标签实例（高级用法）\n */\nexport function createSidebarTags(options: SidebarTagsOptions): SidebarTagsCore {\n  return new SidebarTagsCore(options)\n}\n\n/**\n * 获取CSS文件路径 - 用于手动导入\n */\nexport const cssPath = 'vitepress-plugin-sidebar-tags/style.css'\n\n/**\n * 创建VitePress主题增强器，自动处理CSS导入\n */\nexport function createThemeEnhancer() {\n  return {\n    enhanceApp({ app }: any) {\n      // 客户端环境下的提示\n      if (typeof window !== 'undefined') {\n        console.log('VitePress Sidebar Tags: Please import CSS in your theme file')\n      }\n    }\n  }\n} "],"names":["path"],"mappings":"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"}